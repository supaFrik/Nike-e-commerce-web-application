<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/resources/customer/scripts/ultilities/auth.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/customer/scripts/ultilities/auth.js" />
              <option name="originalContent" value="/**&#10; * Authentication Page JavaScript - Optimized&#10; * Handles sign in/sign up forms, validation, and authentication flow&#10; */&#10;&#10;class AuthenticationManager {&#10;    constructor() {&#10;        this.isSignInMode = true;&#10;        this.validationRules = {&#10;            email: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,&#10;            password: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d@$!%*?&amp;]{8,}$/,&#10;            phone: /^\d{10,}$/&#10;        };&#10;&#10;        this.init();&#10;    }&#10;&#10;    init() {&#10;        this.setupFormElements();&#10;        this.setupEventListeners();&#10;        this.updateFormDisplay();&#10;        this.injectStyles();&#10;    }&#10;&#10;    setupFormElements() {&#10;        this.signInForm = document.getElementById('signInForm');&#10;        this.signUpForm = document.getElementById('signUpForm');&#10;        this.authTitle = document.getElementById('authTitle');&#10;        this.authSubtitle = document.getElementById('authSubtitle');&#10;        this.authFooterText = document.getElementById('authFooterText');&#10;        this.successMessage = document.getElementById('successMessage');&#10;    }&#10;&#10;    setupEventListeners() {&#10;        // Form submit listeners&#10;        if (this.signInForm) {&#10;            this.signInForm.addEventListener('submit', (e) =&gt; this.handleSignIn(e));&#10;        }&#10;&#10;        if (this.signUpForm) {&#10;            this.signUpForm.addEventListener('submit', (e) =&gt; this.handleSignUp(e));&#10;        }&#10;&#10;        // Input validation listeners&#10;        this.addInputValidation();&#10;&#10;        // Password visibility toggles&#10;        this.setupPasswordToggles();&#10;    }&#10;&#10;    addInputValidation() {&#10;        const inputs = document.querySelectorAll('input[type=&quot;email&quot;], input[type=&quot;password&quot;], input[type=&quot;tel&quot;]');&#10;&#10;        inputs.forEach(input =&gt; {&#10;            input.addEventListener('blur', (e) =&gt; this.validateField(e.target));&#10;            input.addEventListener('input', (e) =&gt; this.clearFieldError(e.target));&#10;        });&#10;    }&#10;&#10;    setupPasswordToggles() {&#10;        const toggleButtons = document.querySelectorAll('.password-toggle');&#10;&#10;        toggleButtons.forEach(button =&gt; {&#10;            button.addEventListener('click', (e) =&gt; this.togglePasswordVisibility(e));&#10;        });&#10;    }&#10;&#10;    togglePasswordVisibility(e) {&#10;        const button = e.target.closest('.password-toggle');&#10;        const input = button.previousElementSibling;&#10;        const icon = button.querySelector('i');&#10;&#10;        if (input.type === 'password') {&#10;            input.type = 'text';&#10;            icon.classList.remove('fa-eye');&#10;            icon.classList.add('fa-eye-slash');&#10;            button.setAttribute('aria-label', 'Hide password');&#10;        } else {&#10;            input.type = 'password';&#10;            icon.classList.remove('fa-eye-slash');&#10;            icon.classList.add('fa-eye');&#10;            button.setAttribute('aria-label', 'Show password');&#10;        }&#10;    }&#10;&#10;    toggleForm() {&#10;        this.isSignInMode = !this.isSignInMode;&#10;        this.updateFormDisplay();&#10;        this.clearErrors();&#10;        this.clearForms();&#10;    }&#10;&#10;    updateFormDisplay() {&#10;        if (this.isSignInMode) {&#10;            this.showSignInForm();&#10;        } else {&#10;            this.showSignUpForm();&#10;        }&#10;    }&#10;&#10;    showSignInForm() {&#10;        // Toggle form visibility&#10;        if (this.signInForm) this.signInForm.classList.add('active');&#10;        if (this.signUpForm) this.signUpForm.classList.remove('active');&#10;&#10;        // Update text content&#10;        if (this.authTitle) this.authTitle.textContent = 'Welcome back';&#10;        if (this.authSubtitle) this.authSubtitle.textContent = 'Sign In to Nike';&#10;        if (this.authFooterText) {&#10;            this.authFooterText.innerHTML = 'Don\'t have an account? &lt;a href=&quot;#&quot; onclick=&quot;authManager.toggleForm()&quot;&gt;Sign Up&lt;/a&gt;';&#10;        }&#10;&#10;        // Update document title&#10;        document.title = 'Nike - Sign In';&#10;    }&#10;&#10;    showSignUpForm() {&#10;        // Toggle form visibility&#10;        if (this.signInForm) this.signInForm.classList.remove('active');&#10;        if (this.signUpForm) this.signUpForm.classList.add('active');&#10;&#10;        // Update text content&#10;        if (this.authTitle) this.authTitle.textContent = 'Join Nike';&#10;        if (this.authSubtitle) this.authSubtitle.textContent = 'Create your Nike account';&#10;        if (this.authFooterText) {&#10;            this.authFooterText.innerHTML = 'Already have an account? &lt;a href=&quot;#&quot; onclick=&quot;authManager.toggleForm()&quot;&gt;Sign In&lt;/a&gt;';&#10;        }&#10;&#10;        // Update document title&#10;        document.title = 'Nike - Sign Up';&#10;    }&#10;&#10;    handleSignIn(e) {&#10;        e.preventDefault();&#10;&#10;        const formData = new FormData(this.signInForm);&#10;        const email = formData.get('email');&#10;        const password = formData.get('password');&#10;&#10;        // Validate form&#10;        if (!this.validateSignInForm(email, password)) {&#10;            return;&#10;        }&#10;&#10;        // Show loading state&#10;        this.setFormLoading(true);&#10;&#10;        // Simulate authentication process&#10;        setTimeout(() =&gt; {&#10;            this.processSignIn(email, password);&#10;        }, 1500);&#10;    }&#10;&#10;    handleSignUp(e) {&#10;        e.preventDefault();&#10;&#10;        const formData = new FormData(this.signUpForm);&#10;        const userData = {&#10;            firstName: formData.get('firstName'),&#10;            lastName: formData.get('lastName'),&#10;            email: formData.get('email'),&#10;            password: formData.get('password'),&#10;            confirmPassword: formData.get('confirmPassword'),&#10;            phone: formData.get('phone'),&#10;            dateOfBirth: formData.get('dateOfBirth'),&#10;            agreeToTerms: formData.get('agreeToTerms')&#10;        };&#10;&#10;        // Validate form&#10;        if (!this.validateSignUpForm(userData)) {&#10;            return;&#10;        }&#10;&#10;        // Show loading state&#10;        this.setFormLoading(true);&#10;&#10;        // Simulate registration process&#10;        setTimeout(() =&gt; {&#10;            this.processSignUp(userData);&#10;        }, 2000);&#10;    }&#10;&#10;    validateSignInForm(email, password) {&#10;        let isValid = true;&#10;&#10;        // Clear previous errors&#10;        this.clearErrors();&#10;&#10;        if (!email) {&#10;            this.showFieldError('email', 'Email is required');&#10;            isValid = false;&#10;        } else if (!this.validationRules.email.test(email)) {&#10;            this.showFieldError('email', 'Please enter a valid email address');&#10;            isValid = false;&#10;        }&#10;&#10;        if (!password) {&#10;            this.showFieldError('password', 'Password is required');&#10;            isValid = false;&#10;        }&#10;&#10;        return isValid;&#10;    }&#10;&#10;    validateSignUpForm(userData) {&#10;        let isValid = true;&#10;&#10;        // Clear previous errors&#10;        this.clearErrors();&#10;&#10;        // First name validation&#10;        if (!userData.firstName?.trim()) {&#10;            this.showFieldError('firstName', 'First name is required');&#10;            isValid = false;&#10;        }&#10;&#10;        // Last name validation&#10;        if (!userData.lastName?.trim()) {&#10;            this.showFieldError('lastName', 'Last name is required');&#10;            isValid = false;&#10;        }&#10;&#10;        // Email validation&#10;        if (!userData.email) {&#10;            this.showFieldError('email', 'Email is required');&#10;            isValid = false;&#10;        } else if (!this.validationRules.email.test(userData.email)) {&#10;            this.showFieldError('email', 'Please enter a valid email address');&#10;            isValid = false;&#10;        }&#10;&#10;        // Password validation&#10;        if (!userData.password) {&#10;            this.showFieldError('password', 'Password is required');&#10;            isValid = false;&#10;        } else if (!this.validationRules.password.test(userData.password)) {&#10;            this.showFieldError('password', 'Password must be at least 8 characters with uppercase, lowercase, and number');&#10;            isValid = false;&#10;        }&#10;&#10;        // Confirm password validation&#10;        if (userData.password !== userData.confirmPassword) {&#10;            this.showFieldError('confirmPassword', 'Passwords do not match');&#10;            isValid = false;&#10;        }&#10;&#10;        // Terms agreement validation&#10;        if (!userData.agreeToTerms) {&#10;            this.showGeneralError('You must agree to the Terms and Conditions');&#10;            isValid = false;&#10;        }&#10;&#10;        return isValid;&#10;    }&#10;&#10;    validateField(field) {&#10;        const value = field.value.trim();&#10;        const fieldName = field.name;&#10;&#10;        this.clearFieldError(field);&#10;&#10;        if (field.hasAttribute('required') &amp;&amp; !value) {&#10;            this.showFieldError(fieldName, `${this.getFieldLabel(fieldName)} is required`);&#10;            return false;&#10;        }&#10;&#10;        if (value) {&#10;            switch (field.type) {&#10;                case 'email':&#10;                    if (!this.validationRules.email.test(value)) {&#10;                        this.showFieldError(fieldName, 'Please enter a valid email address');&#10;                        return false;&#10;                    }&#10;                    break;&#10;                case 'password':&#10;                    if (!this.validationRules.password.test(value)) {&#10;                        this.showFieldError(fieldName, 'Password must be at least 8 characters with uppercase, lowercase, and number');&#10;                        return false;&#10;                    }&#10;                    break;&#10;                case 'tel':&#10;                    if (!this.validationRules.phone.test(value.replace(/\D/g, ''))) {&#10;                        this.showFieldError(fieldName, 'Please enter a valid phone number');&#10;                        return false;&#10;                    }&#10;                    break;&#10;            }&#10;        }&#10;&#10;        return true;&#10;    }&#10;&#10;    getFieldLabel(fieldName) {&#10;        const labels = {&#10;            firstName: 'First name',&#10;            lastName: 'Last name',&#10;            email: 'Email',&#10;            password: 'Password',&#10;            confirmPassword: 'Confirm password',&#10;            phone: 'Phone number'&#10;        };&#10;        return labels[fieldName] || fieldName;&#10;    }&#10;&#10;    showFieldError(fieldName, message) {&#10;        const field = document.querySelector(`[name=&quot;${fieldName}&quot;]`);&#10;        if (!field) return;&#10;&#10;        field.classList.add('error');&#10;&#10;        // Remove existing error message&#10;        const existingError = field.parentNode.querySelector('.error-message');&#10;        if (existingError) existingError.remove();&#10;&#10;        // Add new error message&#10;        const errorDiv = document.createElement('div');&#10;        errorDiv.className = 'error-message';&#10;        errorDiv.textContent = message;&#10;        field.parentNode.appendChild(errorDiv);&#10;    }&#10;&#10;    clearFieldError(field) {&#10;        field.classList.remove('error');&#10;        const errorMessage = field.parentNode.querySelector('.error-message');&#10;        if (errorMessage) errorMessage.remove();&#10;    }&#10;&#10;    showGeneralError(message) {&#10;        const errorContainer = document.createElement('div');&#10;        errorContainer.className = 'general-error';&#10;        errorContainer.innerHTML = `&#10;            &lt;i class=&quot;fas fa-exclamation-triangle&quot;&gt;&lt;/i&gt;&#10;            &lt;span&gt;${message}&lt;/span&gt;&#10;        `;&#10;&#10;        // Insert at the top of the active form&#10;        const activeForm = this.isSignInMode ? this.signInForm : this.signUpForm;&#10;        activeForm.insertBefore(errorContainer, activeForm.firstChild);&#10;&#10;        // Auto-remove after 5 seconds&#10;        setTimeout(() =&gt; {&#10;            if (errorContainer.parentElement) {&#10;                errorContainer.remove();&#10;            }&#10;        }, 5000);&#10;    }&#10;&#10;    clearErrors() {&#10;        // Clear field errors&#10;        const errorFields = document.querySelectorAll('.error');&#10;        errorFields.forEach(field =&gt; field.classList.remove('error'));&#10;&#10;        const errorMessages = document.querySelectorAll('.error-message');&#10;        errorMessages.forEach(message =&gt; message.remove());&#10;&#10;        // Clear general errors&#10;        const generalErrors = document.querySelectorAll('.general-error');&#10;        generalErrors.forEach(error =&gt; error.remove());&#10;    }&#10;&#10;    clearForms() {&#10;        if (this.signInForm) this.signInForm.reset();&#10;        if (this.signUpForm) this.signUpForm.reset();&#10;    }&#10;&#10;    setFormLoading(isLoading) {&#10;        const submitButtons = document.querySelectorAll('button[type=&quot;submit&quot;]');&#10;        const forms = document.querySelectorAll('form');&#10;&#10;        submitButtons.forEach(button =&gt; {&#10;            if (isLoading) {&#10;                button.disabled = true;&#10;                button.innerHTML = '&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;/i&gt; Processing...';&#10;            } else {&#10;                button.disabled = false;&#10;                button.innerHTML = this.isSignInMode ? 'Sign In' : 'Create Account';&#10;            }&#10;        });&#10;&#10;        forms.forEach(form =&gt; {&#10;            form.style.pointerEvents = isLoading ? 'none' : 'auto';&#10;            form.style.opacity = isLoading ? '0.7' : '1';&#10;        });&#10;    }&#10;&#10;    processSignIn(email, password) {&#10;        // Simulate authentication&#10;        if (email === 'demo@nike.com' &amp;&amp; password === 'Demo123!') {&#10;            this.showSuccessMessage('Welcome back! Redirecting to your account...');&#10;            setTimeout(() =&gt; {&#10;                window.location.href = 'index.html';&#10;            }, 2000);&#10;        } else {&#10;            this.setFormLoading(false);&#10;            this.showGeneralError('Invalid email or password. Try demo@nike.com / Demo123!');&#10;        }&#10;    }&#10;&#10;    processSignUp(userData) {&#10;        // Simulate registration&#10;        this.showSuccessMessage('Account created successfully! Redirecting...');&#10;&#10;        // Save user data to localStorage for demo purposes&#10;        localStorage.setItem('nikeUser', JSON.stringify({&#10;            firstName: userData.firstName,&#10;            lastName: userData.lastName,&#10;            email: userData.email,&#10;            registeredAt: new Date().toISOString()&#10;        }));&#10;&#10;        setTimeout(() =&gt; {&#10;            window.location.href = 'index.html';&#10;        }, 2000);&#10;    }&#10;&#10;    showSuccessMessage(message) {&#10;        if (this.successMessage) {&#10;            this.successMessage.innerHTML = `&#10;                &lt;div class=&quot;success-content&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-check-circle&quot;&gt;&lt;/i&gt;&#10;                    &lt;span&gt;${message}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;            `;&#10;            this.successMessage.classList.add('show');&#10;        }&#10;    }&#10;&#10;    injectStyles() {&#10;        const style = document.createElement('style');&#10;        style.textContent = `&#10;            .error-message {&#10;                color: #ee0005;&#10;                font-size: 12px;&#10;                margin-top: 4px;&#10;                display: flex;&#10;                align-items: center;&#10;                gap: 4px;&#10;            }&#10;&#10;            .error-message::before {&#10;                content: &quot;⚠&quot;;&#10;                font-size: 10px;&#10;            }&#10;&#10;            .form-group input.error,&#10;            .form-group select.error {&#10;                border-color: #ee0005 !important;&#10;                box-shadow: 0 0 0 3px rgba(238, 0, 5, 0.1);&#10;            }&#10;&#10;            .general-error {&#10;                background: #fee2e2;&#10;                border: 1px solid #ee0005;&#10;                color: #7f1d1d;&#10;                padding: 12px 16px;&#10;                border-radius: 8px;&#10;                margin-bottom: 16px;&#10;                display: flex;&#10;                align-items: center;&#10;                gap: 8px;&#10;                animation: slideDown 0.3s ease-out;&#10;            }&#10;&#10;            .success-content {&#10;                display: flex;&#10;                align-items: center;&#10;                gap: 12px;&#10;                color: #10B981;&#10;                font-weight: 500;&#10;            }&#10;&#10;            .success-content i {&#10;                font-size: 20px;&#10;            }&#10;&#10;            .password-toggle {&#10;                position: absolute;&#10;                right: 12px;&#10;                top: 50%;&#10;                transform: translateY(-50%);&#10;                background: none;&#10;                border: none;&#10;                color: #666;&#10;                cursor: pointer;&#10;                padding: 4px;&#10;            }&#10;&#10;            .password-toggle:hover {&#10;                color: #111;&#10;            }&#10;&#10;            @keyframes slideDown {&#10;                from {&#10;                    opacity: 0;&#10;                    transform: translateY(-10px);&#10;                }&#10;                to {&#10;                    opacity: 1;&#10;                    transform: translateY(0);&#10;                }&#10;            }&#10;        `;&#10;        document.head.appendChild(style);&#10;    }&#10;}&#10;&#10;// Initialize authentication manager&#10;let authManager;&#10;document.addEventListener('DOMContentLoaded', () =&gt; {&#10;    authManager = new AuthenticationManager();&#10;});&#10;&#10;// Global functions for backward compatibility&#10;function toggleForm() {&#10;    if (authManager) authManager.toggleForm();&#10;}&#10;&#10;function togglePassword(inputId) {&#10;    const input = document.getElementById(inputId);&#10;    if (!input) return;&#10;    if (input.type === &quot;password&quot;) {&#10;        input.type = &quot;text&quot;;&#10;    } else {&#10;        input.type = &quot;password&quot;;&#10;    }&#10;}" />
              <option name="updatedContent" value="/**&#10; * Authentication Page JavaScript - Optimized&#10; * Handles sign in/sign up forms, validation, and authentication flow&#10; */&#10;&#10;class AuthenticationManager {&#10;    constructor() {&#10;        this.isSignInMode = true;&#10;        this.validationRules = {&#10;            email: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,&#10;            password: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d@$!%*?&amp;]{8,}$/,&#10;            phone: /^\d{10,}$/&#10;        };&#10;&#10;        this.init();&#10;    }&#10;&#10;    init() {&#10;        this.setupFormElements();&#10;        this.setupEventListeners();&#10;        this.updateFormDisplay();&#10;        this.injectStyles();&#10;    }&#10;&#10;    setupFormElements() {&#10;        this.signInForm = document.getElementById('signInForm');&#10;        this.signUpForm = document.getElementById('signUpForm');&#10;        this.authTitle = document.getElementById('authTitle');&#10;        this.authSubtitle = document.getElementById('authSubtitle');&#10;        this.authFooterText = document.getElementById('authFooterText');&#10;        this.successMessage = document.getElementById('successMessage');&#10;    }&#10;&#10;    setupEventListeners() {&#10;        // Form submit listeners&#10;        if (this.signInForm) {&#10;            this.signInForm.addEventListener('submit', (e) =&gt; this.handleSignIn(e));&#10;        }&#10;&#10;        if (this.signUpForm) {&#10;            this.signUpForm.addEventListener('submit', (e) =&gt; this.handleSignUp(e));&#10;        }&#10;&#10;        // Input validation listeners&#10;        this.addInputValidation();&#10;&#10;        // Password visibility toggles&#10;        this.setupPasswordToggles();&#10;    }&#10;&#10;    addInputValidation() {&#10;        const inputs = document.querySelectorAll('input[type=&quot;email&quot;], input[type=&quot;password&quot;], input[type=&quot;tel&quot;]');&#10;&#10;        inputs.forEach(input =&gt; {&#10;            input.addEventListener('blur', (e) =&gt; this.validateField(e.target));&#10;            input.addEventListener('input', (e) =&gt; this.clearFieldError(e.target));&#10;        });&#10;    }&#10;&#10;    setupPasswordToggles() {&#10;        const toggleButtons = document.querySelectorAll('.password-toggle');&#10;&#10;        toggleButtons.forEach(button =&gt; {&#10;            button.addEventListener('click', (e) =&gt; this.togglePasswordVisibility(e));&#10;        });&#10;    }&#10;&#10;    togglePasswordVisibility(e) {&#10;        const button = e.target.closest('.password-toggle');&#10;        const input = button.previousElementSibling;&#10;        const icon = button.querySelector('i');&#10;&#10;        if (input.type === 'password') {&#10;            input.type = 'text';&#10;            icon.classList.remove('fa-eye');&#10;            icon.classList.add('fa-eye-slash');&#10;            button.setAttribute('aria-label', 'Hide password');&#10;        } else {&#10;            input.type = 'password';&#10;            icon.classList.remove('fa-eye-slash');&#10;            icon.classList.add('fa-eye');&#10;            button.setAttribute('aria-label', 'Show password');&#10;        }&#10;    }&#10;&#10;    toggleForm() {&#10;        this.isSignInMode = !this.isSignInMode;&#10;        this.updateFormDisplay();&#10;        this.clearErrors();&#10;        this.clearForms();&#10;    }&#10;&#10;    updateFormDisplay() {&#10;        if (this.isSignInMode) {&#10;            this.showSignInForm();&#10;        } else {&#10;            this.showSignUpForm();&#10;        }&#10;    }&#10;&#10;    showSignInForm() {&#10;        // Toggle form visibility&#10;        if (this.signInForm) this.signInForm.classList.add('active');&#10;        if (this.signUpForm) this.signUpForm.classList.remove('active');&#10;&#10;        // Update text content&#10;        if (this.authTitle) this.authTitle.textContent = 'Welcome back';&#10;        if (this.authSubtitle) this.authSubtitle.textContent = 'Sign In to Nike';&#10;        if (this.authFooterText) {&#10;            this.authFooterText.innerHTML = 'Don\'t have an account? &lt;a href=&quot;#&quot; onclick=&quot;authManager.toggleForm()&quot;&gt;Sign Up&lt;/a&gt;';&#10;        }&#10;&#10;        // Update document title&#10;        document.title = 'Nike - Sign In';&#10;    }&#10;&#10;    showSignUpForm() {&#10;        // Toggle form visibility&#10;        if (this.signInForm) this.signInForm.classList.remove('active');&#10;        if (this.signUpForm) this.signUpForm.classList.add('active');&#10;&#10;        // Update text content&#10;        if (this.authTitle) this.authTitle.textContent = 'Join Nike';&#10;        if (this.authSubtitle) this.authSubtitle.textContent = 'Create your Nike account';&#10;        if (this.authFooterText) {&#10;            this.authFooterText.innerHTML = 'Already have an account? &lt;a href=&quot;#&quot; onclick=&quot;authManager.toggleForm()&quot;&gt;Sign In&lt;/a&gt;';&#10;        }&#10;&#10;        // Update document title&#10;        document.title = 'Nike - Sign Up';&#10;    }&#10;&#10;    handleSignIn(e) {&#10;        e.preventDefault();&#10;&#10;        const formData = new FormData(this.signInForm);&#10;        const email = formData.get('email');&#10;        const password = formData.get('password');&#10;&#10;        // Validate form&#10;        if (!this.validateSignInForm(email, password)) {&#10;            return;&#10;        }&#10;&#10;        // Show loading state&#10;        this.setFormLoading(true);&#10;&#10;        // Simulate authentication process&#10;        setTimeout(() =&gt; {&#10;            this.processSignIn(email, password);&#10;        }, 1500);&#10;    }&#10;&#10;    handleSignUp(e) {&#10;        e.preventDefault();&#10;&#10;        const formData = new FormData(this.signUpForm);&#10;        const userData = {&#10;            firstName: formData.get('firstName'),&#10;            lastName: formData.get('lastName'),&#10;            email: formData.get('email'),&#10;            password: formData.get('password'),&#10;            confirmPassword: formData.get('confirmPassword'),&#10;            phone: formData.get('phone'),&#10;            dateOfBirth: formData.get('dateOfBirth'),&#10;            agreeToTerms: formData.get('agreeToTerms')&#10;        };&#10;&#10;        // Validate form&#10;        if (!this.validateSignUpForm(userData)) {&#10;            return;&#10;        }&#10;&#10;        // Show loading state&#10;        this.setFormLoading(true);&#10;&#10;        // Simulate registration process&#10;        setTimeout(() =&gt; {&#10;            this.processSignUp(userData);&#10;        }, 2000);&#10;    }&#10;&#10;    validateSignInForm(email, password) {&#10;        let isValid = true;&#10;&#10;        // Clear previous errors&#10;        this.clearErrors();&#10;&#10;        if (!email) {&#10;            this.showFieldError('email', 'Email is required');&#10;            isValid = false;&#10;        } else if (!this.validationRules.email.test(email)) {&#10;            this.showFieldError('email', 'Please enter a valid email address');&#10;            isValid = false;&#10;        }&#10;&#10;        if (!password) {&#10;            this.showFieldError('password', 'Password is required');&#10;            isValid = false;&#10;        }&#10;&#10;        return isValid;&#10;    }&#10;&#10;    validateSignUpForm(userData) {&#10;        let isValid = true;&#10;&#10;        // Clear previous errors&#10;        this.clearErrors();&#10;&#10;        // First name validation&#10;        if (!userData.firstName?.trim()) {&#10;            this.showFieldError('firstName', 'First name is required');&#10;            isValid = false;&#10;        }&#10;&#10;        // Last name validation&#10;        if (!userData.lastName?.trim()) {&#10;            this.showFieldError('lastName', 'Last name is required');&#10;            isValid = false;&#10;        }&#10;&#10;        // Email validation&#10;        if (!userData.email) {&#10;            this.showFieldError('email', 'Email is required');&#10;            isValid = false;&#10;        } else if (!this.validationRules.email.test(userData.email)) {&#10;            this.showFieldError('email', 'Please enter a valid email address');&#10;            isValid = false;&#10;        }&#10;&#10;        // Password validation&#10;        if (!userData.password) {&#10;            this.showFieldError('password', 'Password is required');&#10;            isValid = false;&#10;        } else if (!this.validationRules.password.test(userData.password)) {&#10;            this.showFieldError('password', 'Password must be at least 8 characters with uppercase, lowercase, and number');&#10;            isValid = false;&#10;        }&#10;&#10;        // Confirm password validation&#10;        if (userData.password !== userData.confirmPassword) {&#10;            this.showFieldError('confirmPassword', 'Passwords do not match');&#10;            isValid = false;&#10;        }&#10;&#10;        // Terms agreement validation&#10;        if (!userData.agreeToTerms) {&#10;            this.showGeneralError('You must agree to the Terms and Conditions');&#10;            isValid = false;&#10;        }&#10;&#10;        return isValid;&#10;    }&#10;&#10;    validateField(field) {&#10;        const value = field.value.trim();&#10;        const fieldName = field.name;&#10;&#10;        this.clearFieldError(field);&#10;&#10;        if (field.hasAttribute('required') &amp;&amp; !value) {&#10;            this.showFieldError(fieldName, `${this.getFieldLabel(fieldName)} is required`);&#10;            return false;&#10;        }&#10;&#10;        if (value) {&#10;            switch (field.type) {&#10;                case 'email':&#10;                    if (!this.validationRules.email.test(value)) {&#10;                        this.showFieldError(fieldName, 'Please enter a valid email address');&#10;                        return false;&#10;                    }&#10;                    break;&#10;                case 'password':&#10;                    if (!this.validationRules.password.test(value)) {&#10;                        this.showFieldError(fieldName, 'Password must be at least 8 characters with uppercase, lowercase, and number');&#10;                        return false;&#10;                    }&#10;                    break;&#10;                case 'tel':&#10;                    if (!this.validationRules.phone.test(value.replace(/\D/g, ''))) {&#10;                        this.showFieldError(fieldName, 'Please enter a valid phone number');&#10;                        return false;&#10;                    }&#10;                    break;&#10;            }&#10;        }&#10;&#10;        return true;&#10;    }&#10;&#10;    getFieldLabel(fieldName) {&#10;        const labels = {&#10;            firstName: 'First name',&#10;            lastName: 'Last name',&#10;            email: 'Email',&#10;            password: 'Password',&#10;            confirmPassword: 'Confirm password',&#10;            phone: 'Phone number'&#10;        };&#10;        return labels[fieldName] || fieldName;&#10;    }&#10;&#10;    showFieldError(fieldName, message) {&#10;        const field = document.querySelector(`[name=&quot;${fieldName}&quot;]`);&#10;        if (!field) return;&#10;&#10;        field.classList.add('error');&#10;&#10;        // Remove existing error message&#10;        const existingError = field.parentNode.querySelector('.error-message');&#10;        if (existingError) existingError.remove();&#10;&#10;        // Add new error message&#10;        const errorDiv = document.createElement('div');&#10;        errorDiv.className = 'error-message';&#10;        errorDiv.textContent = message;&#10;        field.parentNode.appendChild(errorDiv);&#10;    }&#10;&#10;    clearFieldError(field) {&#10;        field.classList.remove('error');&#10;        const errorMessage = field.parentNode.querySelector('.error-message');&#10;        if (errorMessage) errorMessage.remove();&#10;    }&#10;&#10;    showGeneralError(message) {&#10;        const errorContainer = document.createElement('div');&#10;        errorContainer.className = 'general-error';&#10;        errorContainer.innerHTML = `&#10;            &lt;i class=&quot;fas fa-exclamation-triangle&quot;&gt;&lt;/i&gt;&#10;            &lt;span&gt;${message}&lt;/span&gt;&#10;        `;&#10;&#10;        // Insert at the top of the active form&#10;        const activeForm = this.isSignInMode ? this.signInForm : this.signUpForm;&#10;        activeForm.insertBefore(errorContainer, activeForm.firstChild);&#10;&#10;        // Auto-remove after 5 seconds&#10;        setTimeout(() =&gt; {&#10;            if (errorContainer.parentElement) {&#10;                errorContainer.remove();&#10;            }&#10;        }, 5000);&#10;    }&#10;&#10;    clearErrors() {&#10;        // Clear field errors&#10;        const errorFields = document.querySelectorAll('.error');&#10;        errorFields.forEach(field =&gt; field.classList.remove('error'));&#10;&#10;        const errorMessages = document.querySelectorAll('.error-message');&#10;        errorMessages.forEach(message =&gt; message.remove());&#10;&#10;        // Clear general errors&#10;        const generalErrors = document.querySelectorAll('.general-error');&#10;        generalErrors.forEach(error =&gt; error.remove());&#10;    }&#10;&#10;    clearForms() {&#10;        if (this.signInForm) this.signInForm.reset();&#10;        if (this.signUpForm) this.signUpForm.reset();&#10;    }&#10;&#10;    setFormLoading(isLoading) {&#10;        const submitButtons = document.querySelectorAll('button[type=&quot;submit&quot;]');&#10;        const forms = document.querySelectorAll('form');&#10;&#10;        submitButtons.forEach(button =&gt; {&#10;            if (isLoading) {&#10;                button.disabled = true;&#10;                button.innerHTML = '&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;/i&gt; Processing...';&#10;            } else {&#10;                button.disabled = false;&#10;                button.innerHTML = this.isSignInMode ? 'Sign In' : 'Create Account';&#10;            }&#10;        });&#10;&#10;        forms.forEach(form =&gt; {&#10;            form.style.pointerEvents = isLoading ? 'none' : 'auto';&#10;            form.style.opacity = isLoading ? '0.7' : '1';&#10;        });&#10;    }&#10;&#10;    processSignIn(email, password) {&#10;        // Simulate authentication&#10;        if (email === 'demo@nike.com' &amp;&amp; password === 'Demo123!') {&#10;            this.showSuccessMessage('Welcome back! Redirecting to your account...');&#10;            setTimeout(() =&gt; {&#10;                window.location.href = 'index.html';&#10;            }, 2000);&#10;        } else {&#10;            this.setFormLoading(false);&#10;            this.showGeneralError('Invalid email or password. Try demo@nike.com / Demo123!');&#10;        }&#10;    }&#10;&#10;    processSignUp(userData) {&#10;        // Simulate registration&#10;        this.showSuccessMessage('Account created successfully! Redirecting...');&#10;&#10;        // Save user data to localStorage for demo purposes&#10;        localStorage.setItem('nikeUser', JSON.stringify({&#10;            firstName: userData.firstName,&#10;            lastName: userData.lastName,&#10;            email: userData.email,&#10;            registeredAt: new Date().toISOString()&#10;        }));&#10;&#10;        setTimeout(() =&gt; {&#10;            window.location.href = 'index.html';&#10;        }, 2000);&#10;    }&#10;&#10;    showSuccessMessage(message) {&#10;        if (this.successMessage) {&#10;            this.successMessage.innerHTML = `&#10;                &lt;div class=&quot;success-content&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-check-circle&quot;&gt;&lt;/i&gt;&#10;                    &lt;span&gt;${message}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;            `;&#10;            this.successMessage.classList.add('show');&#10;        }&#10;    }&#10;&#10;    injectStyles() {&#10;        const style = document.createElement('style');&#10;        style.textContent = `&#10;            .error-message {&#10;                color: #ee0005;&#10;                font-size: 12px;&#10;                margin-top: 4px;&#10;                display: flex;&#10;                align-items: center;&#10;                gap: 4px;&#10;            }&#10;&#10;            .error-message::before {&#10;                content: &quot;⚠&quot;;&#10;                font-size: 10px;&#10;            }&#10;&#10;            .form-group input.error,&#10;            .form-group select.error {&#10;                border-color: #ee0005 !important;&#10;                box-shadow: 0 0 0 3px rgba(238, 0, 5, 0.1);&#10;            }&#10;&#10;            .general-error {&#10;                background: #fee2e2;&#10;                border: 1px solid #ee0005;&#10;                color: #7f1d1d;&#10;                padding: 12px 16px;&#10;                border-radius: 8px;&#10;                margin-bottom: 16px;&#10;                display: flex;&#10;                align-items: center;&#10;                gap: 8px;&#10;                animation: slideDown 0.3s ease-out;&#10;            }&#10;&#10;            .success-content {&#10;                display: flex;&#10;                align-items: center;&#10;                gap: 12px;&#10;                color: #10B981;&#10;                font-weight: 500;&#10;            }&#10;&#10;            .success-content i {&#10;                font-size: 20px;&#10;            }&#10;&#10;            .password-toggle {&#10;                position: absolute;&#10;                right: 12px;&#10;                top: 50%;&#10;                transform: translateY(-50%);&#10;                background: none;&#10;                border: none;&#10;                color: #666;&#10;                cursor: pointer;&#10;                padding: 4px;&#10;            }&#10;&#10;            .password-toggle:hover {&#10;                color: #111;&#10;            }&#10;&#10;            @keyframes slideDown {&#10;                from {&#10;                    opacity: 0;&#10;                    transform: translateY(-10px);&#10;                }&#10;                to {&#10;                    opacity: 1;&#10;                    transform: translateY(0);&#10;                }&#10;            }&#10;        `;&#10;        document.head.appendChild(style);&#10;    }&#10;}&#10;&#10;// Initialize authentication manager&#10;let authManager;&#10;document.addEventListener('DOMContentLoaded', () =&gt; {&#10;    authManager = new AuthenticationManager();&#10;});&#10;&#10;// Global functions for backward compatibility&#10;function toggleForm() {&#10;    if (authManager) authManager.toggleForm();&#10;}&#10;&#10;function togglePassword(inputId) {&#10;    const input = document.getElementById(inputId);&#10;    if (!input) return;&#10;    if (input.type === &quot;password&quot;) {&#10;        input.type = &quot;text&quot;;&#10;    } else {&#10;        input.type = &quot;password&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>